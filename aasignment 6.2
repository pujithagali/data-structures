#include <stdio.h> 
#include <stdlib.h> 
long long mergeAndCount(int arr[], int temp[], int left, int mid, int right) { 
int i = left; 
// Index for left subarray 
int j = mid + 1; // Index for right 
subarray 
int k = left; 
// Index for merged 
subarray 
long long inversions = 0; // Count of 
inversions 
while (i <= mid && j <= right) { 
if (arr[i] <= arr[j]) { 
temp[k++] = arr[i++]; 
} else { 
// If arr[i] > arr[j], it's an inversion 
temp[k++] = arr[j++]; 
inversions += mid - i + 1; 
} 
} 
// Copy the remaining elements from both subarrays 
while (i <= mid) { 
} 
temp[k++] = arr[i++]; 
while (j <= right) { 
temp[k++] = arr[j++]; 
} 
// Copy the merged elements back to 
the original array 
for (i = left; i <= right; i++) { 
arr[i] = temp[i]; 
} 
} 
return inversions; 
long long mergeSortAndCount(int arr[], int 
temp[], int left, int right) { 
long long inversions = 0; 
if (left < right) { 
int mid = (left + right) / 2; 
// Recursively sort and count inversions in the left and right subarrays 
inversions += mergeSortAndCount(arr, 
temp, left, mid); 
inversions += mergeSortAndCount(arr, temp, mid + 1, right); 
// Merge the two sorted subarrays and add their inversions 
inversions += mergeAndCount(arr, 
temp, left, mid, right); 
} 
return inversions; 
} 
long long countInversions (int arr[], int n) { int* temp = (int*)malloc(n* sizeof(int)); if (temp == NULL) { 
fprintf(stderr, "Memory allocation 
failed\n"); 
exit(1); 
} 
long long inversions = mergeSortAndCount(arr, temp, 0, n - 1); 
free(temp); 
return inversions; 
} 
int main() { 
int arr[] = {5, 3, 2, 4, 1}; 
int n = sizeof(arr) / sizeof(arr[0]); 
long long inversions 
= 
countInversions(arr, n); 
printf("Number of inversions: %ld\n", 
inversions); 
return 0; 
} 
